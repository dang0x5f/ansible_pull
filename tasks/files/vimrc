" Build directory structure
" necessary autoload, backup, colors, plugged
" mkdir -p ~/.vim ~/.vim/autoload ~/.vim/backup ~/.vim/colors ~/.vim/plugged
" nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel

" fix single quotes in c/cpp code
" au FileType c,cpp setlocal comments-=:// comments+=f://

au VimLeave * !echo -e "\033[0m"

" Suppress unsaved buffer warning when moving between buffers
set hidden

" fix backspace not deleting in some environments
set backspace=indent,eol,start

" disable compatibility with vi, known to cause problems
set nocompatible

" enable file detection
filetype on

" enable and load plugins
filetype plugin on

" load an indent file for the detected file type
filetype indent on

" C-Indentation, indent block by moving to a bracket {} and type =%
set cindent
set cinoptions=g0

" syntax highlighting
syntax on

" number lines
set number
set relativenumber

" Fix shift - O lag
set timeout timeoutlen=5000 ttimeoutlen=100

" True Color Support
set termguicolors
" :help xterm-true-color
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" horizontal cursor location
" SEARCH 256COLOR CHART for 3 digit values
" sets cursor color (ctermbg)
" disables underline (cterm)
set cursorline
highlight CursorLine ctermbg=234 cterm=bold
" SETS FOLD LINE COLOR SO IT IS READABLE.
hi Folded ctermbg=000
"hi! Normal ctermbg=NONE guibg=NONE
"hi! NonText ctermbg=NONE guibg=NONE

" vertical cursor location
"set cursorcolumn

" shift width, aka, line indentation within functions
set shiftwidth=4

" set tab width
set tabstop=4

" use space characters instead of tabs
set expandtab

" do not save backup files
set nobackup

" cursor line scroll limit
set scrolloff=10

" do not wrap lines
" set no wrap

" highlight typed characters as you search
set incsearch

" case insensitive search
set ignorecase

" override the ignorecase for exclusive capital case word searches
set smartcase

" shows input cmd in bar. eg yy , dd , etc
set showcmd

" display mode in bar
set showmode

" show matching words in search
set showmatch

" use highlighting when searching
" nohlsearch helps highlight goaway, :nohl cmd works too
" set hlsearch
set nohlsearch

" fixing single quotes in c/cpp code
au FileType c,cpp setlocal comments-=:// comments+=f://

" set cmd history. default=2
set history=500

" scrolloff, keeps cursor centered while it can
set so=999

" enable TAB autocompletion. USE :e COMMAND
set wildmenu

" wildmenu similar to bash completion. USE :e COMMAND
set wildmode=list:longest

" There are certain files that we would never want to edit with vim
"   Wildmenu will ignore these extensions
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

let g:vimwiki_list = [{'path':'~/docs/vimwiki/'}]

" USE :help TO GET HELP UNDERSTANDING COMMANDS. eg :help folding

" FOLD KEYBINDS zo=open ; zc=close ; zR=openALL ; zM=closeALL

" PLUGINS -------------------------------------------------------------------- {{{

" curl plug.vim from github and place in .vim/auto/plug.vim
" google vim plugin manager 
" plugin syntax: Plug 'username/plugin-name'
" :source ~/.vimrc
" :PlugInstall

call plug#begin('~/.vim/plugged')

" ale checks syntax
Plug 'dense-analysis/ale'
" nerdtree offers filesystem structure
Plug 'preservim/nerdtree'
Plug 'NLKNguyen/papercolor-theme'
Plug 'dracula/vim'
Plug 'tpope/vim-commentary'
Plug 'vimwiki/vimwiki'
" Plug 'andlrc/rpgle.vim'
" Plug 'junegunn/seoul256.vim'
" Plug 'mswift42/vim-themes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
let g:gitgutter_grep=''
set updatetime=100
" check plug folder for debugging log
" let g:gitgutter_log=1 

call plug#end()

set t_Co=256
set background=dark
" term doesnt support italics, necessary to avoid inverted blocks
" https://vi.stackexchange.com/questions/41605/how-can-i-remove-inverted-background-colors-with-dracula-colorscheme
let g:dracula_italic = 0
" setting colorscheme below removes transparency
" colorscheme dracula
" colorscheme PaperColor


" }}}

" MAPPINGS ------------------------------------------------------------------- {{{

" keymap syntax: map_mode <key_bind> <key_action>
" nnoremap - normalMode
" inoremap - insertMode
" vnoremap - visualMode
"
nnoremap <Space> <Nop>
let mapleader = " "
" map nk :bn<CR>
" map nj :bp<CR>
" map nd :bd<CR>
nnoremap nk :bn<CR>
nnoremap nj :bp<CR>
nnoremap nd :bd<CR>
" future use: if --more-- causes problems, look into set nomore
nnoremap nb :ls<CR>:b<Space>

nnoremap nn n<Esc>

nnoremap o o<Esc>
nnoremap O O<Esc>

" yanks from cursor to end of line
" nnoremap Y y$
" vnoremap <leader>cc "+y
" vnoremap <leader>cv "+p
vmap <C-c> "+y
vmap <C-v> "+p

" auto bracket completion, can also add apostrophe and quotes
inoremap {<CR> {<CR>}<Esc>ko
inoremap ( ()<Esc>ha
inoremap [ []<Esc>ha

inoremap <C-[> <C-[>l

" indenting
vnoremap > > gv
vnoremap < < gv

" nnoremap <leader>; :Commentary<cr>
" toggle NERDtree

nnoremap <F2> :ALEToggle<cr>
nnoremap <F3> :NERDTreeToggle<cr>
" ignore certain files/dirs
let NERDTreeIgnore=['\.git$', '\.jpg$', '\.mp4$', '\.ogg$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.db$']

"nnoremap <F8> :colorscheme dracula<CR>
"nnoremap <F9> :colorscheme breezy-fall<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" }}}

" VIMSCRIPT ------------------------------------------------------------------ {{{

" code folding
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
    


" move in and out of terminal buffer without getting stuck
autocmd TerminalOpen * if bufwinnr('') > 0 | setlocal nobuflisted | endif
autocmd TerminalOpen * setlocal nobuflisted

" auto setup lsp server when vim opens c-type files
" au User lsp_setup call lsp#register_server({
"             \'name': 'clangd',
"             \'cmd': {server_info->['clangd15', '--background-index', '--header-insertion=never']},
"             \'allowlist': ['c', 'cpp', 'objc'],
"             \'initialization': {},
"             \})


" let paths = split(globpath(&runtimepath,'colors/*.vim'),"\n")
let paths = split(globpath('~/.vim','colors/*.vim'),"\n")
let s:colors = map(paths, 'fnamemodify(v:val, ":t:r")')
let s:index = 0

function! SwitchColor(num)
    let s:index += a:num
    let i = s:index % len(s:colors)
    execute "colorscheme " . s:colors[i]
    redraw
    execute "colorscheme"
endfunction
map <F8> :call SwitchColor(1)<CR>


function! HourColor()
    let hr = str2nr(strftime('%H'))
    if hr >= 5 && hr <= 20
        let i = 0
    else
        let i = 1
    endif
    
    let hourcolors = 'seoul256-light dracula'
    execute 'colorscheme ' .split(hourcolors)[i]
    redraw 
    execute 'colorscheme'
endfunction
autocmd VimEnter * call HourColor()

" }}}

" STATUS LINE ---------------------------------------------------------------- {{{

" clear status line after vimrc reload
set statusline=

" statusline left side
" set statusline+=\ %F\ %M\ %Y\ %R
" set statusline+=\ %f\ %M\ %Y\ %R\ \%2n\/%{bufnr('$')}
set statusline+=\ %F\ %M\ %Y\ %R\ %{FugitiveStatusline()}

" set status line divider
set statusline+=%=

" statusline right side
" set statusline+=\ buffer:\%2n\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%
" set statusline+=\ buffer:\%2n\ row:\ %l\ col:\ %c\ [%p%%]
set statusline+=\ %b\ 0x%B\ [y:%l,x:%c]\ [%p%%]\ [\%n\/%{bufnr('$')}]

"show the status on the second to last line
set laststatus=2

" }}}
